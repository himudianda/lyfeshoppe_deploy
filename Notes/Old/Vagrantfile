Vagrant.require_version '>= 1.6.0'

# Configuration settings for the Virtual Machine.
$update_channel = 'beta'
$image_version = 'current'
$vm_memory = 1024
$vm_cpus = 1
$forwarded_ports = {
  '80' => '8080',
  '443' => '8081'
}
$vm_host = 'core-01'
$vm_ip = '172.17.8.101'

Vagrant.configure('2') do |config|
  config.ssh.insert_key = false
  config.ssh.forward_agent = true

  config.vm.box = 'coreos-%s' % [$update_channel]
  if $image_version != 'current'
      config.vm.box_version = $image_version
  end
  config.vm.box_url = 'http://%s.release.core-os.net/amd64-usr/%s/coreos_production_vagrant.json' % [$update_channel, $image_version]

  ['vmware_fusion', 'vmware_workstation'].each do |vmware|
    config.vm.provider vmware do |v, override|
      override.vm.box_url = 'http://%s.release.core-os.net/amd64-usr/%s/coreos_production_vagrant_vmware_fusion.json' % [$update_channel, $image_version]
    end
  end

  config.vm.provider :virtualbox do |v|
    v.check_guest_additions = false
    v.functional_vboxsf     = false
  end

  if Vagrant.has_plugin?('vagrant-vbguest') then
    config.vbguest.auto_update = false
  end

  config.vm.define vm_name = $vm_host do |config|
    config.vm.hostname = vm_name

    config.vm.network :private_network, ip: $vm_ip

    $forwarded_ports.each do |guest, host|
      config.vm.network 'forwarded_port', guest: guest, host: host, auto_correct: true
    end

    ['vmware_fusion', 'vmware_workstation'].each do |vmware|
      config.vm.provider vmware do |v|
        v.gui = false
        v.vmx['memsize'] = $vm_memory
        v.vmx['numvcpus'] = $vm_cpus
      end
    end

    config.vm.provider :virtualbox do |vb|
      vb.gui = false
      vb.memory = $vm_memory
      vb.cpus = $vm_cpus
    end

    # Create bare git repos.
    config.vm.provision 'shell',
                        inline: 'sudo mkdir -p /var/git/nginx.git /var/git/nginx /var/git/website.git /var/git/website'

    config.vm.provision 'shell',
                        inline: 'sudo su && cd /var/git/nginx.git && git --bare init && chown -R core:core /var/git/nginx.git && chown -R core:core /var/git/nginx'

    config.vm.provision 'shell',
                        inline: 'sudo su && cd /var/git/website.git && git --bare init && chown -R core:core /var/git/website.git && chown -R core:core /var/git/website'


    # Copy files into the VM instance upon provision.
    config.vm.provision 'file', source: '../deploy/nginx/certs',
                                destination: '/tmp'

    config.vm.provision 'file', source: '../deploy/units',
                                destination: '/tmp'

    config.vm.provision 'file', source: '../deploy/git/post-receive',
                                destination: '/tmp'

    config.vm.provision :file, source: '../deploy/staging/instance',
                               destination: '/home/core'

    config.vm.provision :file, source: '../deploy/staging/faye.env',
                               destination: '/home/core/faye.env'

    config.vm.provision :file, source: '../deploy/staging/rules-save',
                               destination: '/tmp/rules-save'


    # Move the files with sudo into the correct remote location.
    config.vm.provision 'shell',
                        inline: 'sudo mv /tmp/certs/lyfeshoppe.crt /etc/ssl/certs'

    config.vm.provision 'shell',
                        inline: 'sudo mv /tmp/certs/lyfeshoppe.key /etc/ssl/private'

    config.vm.provision 'shell',
                        inline: 'sudo mv /tmp/certs/dhparam.pem /etc/ssl/private'


    config.vm.provision 'shell',
                        inline: 'sudo mv /tmp/units/postgres.service /etc/systemd/system'

    config.vm.provision 'shell',
                        inline: 'sudo mv /tmp/units/redis.service /etc/systemd/system'

    config.vm.provision 'shell',
                        inline: 'sudo mv /tmp/units/faye.service /etc/systemd/system'

    config.vm.provision 'shell',
                        inline: 'sudo mv /tmp/units/nginx.service /etc/systemd/system'

    config.vm.provision 'shell',
                        inline: 'sudo mv /tmp/units/celery.service /etc/systemd/system'

    config.vm.provision 'shell',
                        inline: 'sudo mv /tmp/units/flower.service /etc/systemd/system'

    config.vm.provision 'shell',
                        inline: 'sudo mv /tmp/units/website.service /etc/systemd/system'

    config.vm.provision 'shell',
                        inline: 'sudo mv /tmp/units/stream.service /etc/systemd/system'

    config.vm.provision 'shell',
                        inline: 'mv /tmp/post-receive/nginx /var/git/nginx.git/hooks/post-receive'

    config.vm.provision 'shell',
                        inline: 'mv /tmp/post-receive/website /var/git/website.git/hooks/post-receive'

    config.vm.provision 'shell',
                        inline: 'mv /tmp/rules-save /var/lib/iptables/rules-save'


    # Set proper permissions.
    config.vm.provision 'shell',
                        inline: 'sudo chown root:root /var/lib/iptables/rules-save'

    config.vm.provision 'shell',
                        inline: 'chmod +x /var/git/nginx.git/hooks/post-receive /var/git/website.git/hooks/post-receive'


    # Start and enable iptables rules, and restart Docker for it to remain synced.
    config.vm.provision 'shell',
                        inline: 'sudo systemctl enable iptables-restore && sudo systemctl start iptables-restore'
    config.vm.provision 'shell',
                        inline: 'sudo systemctl restart docker'

    # Pull in any Docker images we need.
    config.vm.provision 'shell',
                        inline: 'docker pull postgres:9.4.3'
    config.vm.provision 'shell',
                        inline: 'docker pull redis:2.8.21'
    config.vm.provision 'shell',
                        inline: 'docker pull nickjj/faye'

    # Enable and start services through systemd, this ensures it loads on bootup.
    config.vm.provision 'shell',
                        inline: 'sudo systemctl enable postgres.service redis.service faye.service && sudo systemctl start postgres.service redis.service faye.service'

    # **************************************************************************
    # A few commands need to be ran on your `workstation` before proceeding.
    # --------------------------------------------------------------------------
    # Set up the staging remotes for both the `nginx` and `website` repos.
    #
    # Run this from within the nginx directory:
    #
    # git init && git add -A && git commit -m "Initial commit"
    # git remote add staging ssh://core-01:/var/git/nginx.git
    # git push staging master
    #
    #
    # Run this from within the website directory:
    #
    # git remote add staging ssh://core-01:/var/git/website.git
    # git push staging master
    # **************************************************************************

    # **************************************************************************
    # A few commands need to be ran on the `CoreOS host` before proceeding.
    # --------------------------------------------------------------------------
    # Now we need to enable the services:
    #
    # sudo systemctl enable celery.service flower.service website.service stream.service nginx.service
    # sudo systemctl start celery.service flower.service website.service stream.service nginx.service
    #
    #
    # Now we need to initialize the database for the first time, make sure the
    # username and password matches what's inside of the db_uri in settings.py:
    #
    # docker exec -it postgres createdb -U postgres lyfeshoppe
    # docker exec -it postgres psql -U postgres -c "CREATE USER lyfeshoppe WITH PASSWORD 'bestpassword'; GRANT ALL PRIVILEGES ON DATABASE lyfeshoppe to lyfeshoppe;"
    # docker exec -it website run db init
    # docker exec -it website run db seed
    #
    #
    # You might need to restart the nginx container if you do not see any assets:
    # docker stop nginx
    # **************************************************************************

    # **************************************************************************
    # View the website on your `workstation`.
    # --------------------------------------------------------------------------
    # https://localhost:8081
    # **************************************************************************
  end
end
